package main

import (
	"fmt"
	"math"
)

func main() {
	//fmt.Println("========================")
	//fmt.Println("Задача 10.01.")
	//fmt.Println("========================")
	task1001()
	//fmt.Println("========================")
	//fmt.Println("Задача 10.02.")
	//fmt.Println("========================")
	//task1002()
}
func task1001() {
	/*
	   Задание 1: Разложение ex в ряд Тейлора

	   Что нужно сделать
	   Написать программу, вычисляющую ex посредством разложения в ряд Тейлора, с заданной пользователем точностью.
	   Ряд Тейлора для ex:
	   пользователь вводит значение x и с точностью до какого знака после запятой необходимо вычислить значение функции.

	   Советы и рекомендации
	   Получить значение точности (эпсилон) можно рассчитать, разделив 1 на 10 возведенную в степень равную количеству знаков после запятой.

	   Что оценивается
	   для x = 0 и n = 1 вывод должен быть 1
	   для x = 1 и n = 3 вывод должен быть 2.7182539682539684
	   для x = 1 и n = 5 вывод должен быть 2.7182815255731922

	   https://newman.livejournal.com/168590.html

	*/
	var facti, res float64
	var x, n int = 0, 0
	//fmt.Print("Введите x: ")
	//fmt.Scan(x)
	//fmt.Print("Введите n: ")
	//fmt.Scan(n)
	x = 1
	n = 3
	//fmt.Println("x=", x)
	//fmt.Println("n=", n)
	eps := 1 / math.Pow(10, float64(n))
	fmt.Println("eps =", eps)
	//res = 1.0 + float64(x)
	//fmt.Println("res = ", res)
	for i := 1; i <= 10; i++ {
		facti = 1
		for ii := 1; ii < i; ii++ {
			facti = facti + facti*float64(ii)
		}
		xi := math.Pow(float64(i), float64(x))

		res += xi / (facti)

		fmt.Println("x =", x, "i =", i, "xi =", xi, "facti =", facti, "res =", res)
	}

	fmt.Println("res = ", res)
	fmt.Println("n = ", n)
}
func task1002() {
	/*
			Что нужно сделать

			В связи с особенностями хранения дробных чисел, они не очень подходят для хранения денежных значений (может потеряться значимая часть при переполнении,
			да и дробная часть больше двух знаков не нужна). Но мы с вами попробуем решить задачу начисления процентов используя именно их.
			Пусть пользователь вводит сумму которую он кладет в банк, ежемесячный процент капитализации и количество лет на которое делается вклад.
			Необходимо помесячно пересчитывать сумму округляя ее до целого количества копеек вниз.
			Например, если после начисления процентов остаток включает 35,78 копеек, то оставляем только 35 копеек, а дробную часть отбрасываем.
			По окончании работы программы необходимо вывести какую сумму получит вкладчик на руки и какая сумма будет зачислена в пользу банка за счет округления копеек.

			Советы и рекомендации
			Для округления копеек, можно умножить получившееся после капитализации процентов число на 100, округлить вниз и опять поделить на 100,
			отбрасываемую часть можно получить вычитанием текущего значения остатка на счете и того, который был до округления.

			Что оценивается
		    Для 1000 рублей, 1% и 1 года программа должна вывести 1126,78 и 0.04350000000022192 (возможно меньше знаков)
		    Для 1000 рублей, 1% и 10 лет программа должна вывести 3299.41 и 0.5216000000013992 (возможно меньше знаков)
	*/

	var roundingAmount, сontribution, percent float64
	var years int
	//fmt.Print("Введите сумму вклада: ")
	//fmt.Scan(сontribution)
	//fmt.Print("Введите количество лет: ")
	//fmt.Scan(years)
	//fmt.Print("Введите процент: ")
	//fmt.Scan(percent)

	сontribution = 1000
	years = 1
	percent = 1

	roundingAmount = 0

	for i := 1; i <= years*12; i++ {
		fullContribution := сontribution + сontribution*percent/100
		сontribution = math.Trunc(fullContribution*100) / 100
		roundingAmount += fullContribution - сontribution
	}

	fmt.Println("Сумма:", сontribution, " Сумма банка:", roundingAmount)
}
